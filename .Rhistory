xl <- c(-4,5,14)
xl
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
L <- 1
for (x in xl) {
L <- L * 1/sqrt(2*pi*sigma^2) * exp( -((x-mu)^2) / (2*sigma^2) )
}
print(paste('mu=',mu,' sigma=',sigma,' L=',L))
}
ms <- data.frame(mu=c(4,5,0,5), sigma=c(5,9,9,4))
ms
dim(ms)
xl <- c(-4,5,14)
xl
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
L <- 1
for (x in xl) {
L <- L * 1/sqrt(2*pi*sigma^2) * exp( -((x-mu)^2) / (2*sigma^2) )
}
print(paste('mu=',mu,' sigma=',sigma,' L=',L))
}
ms <- data.frame(mu=c(4,5,0,5), sigma=c(5,9,9,4))
ms
dim(ms)
xl <- c(-4,5,14)
xl
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
L <- 1
for (x in xl) {
L <- L * 1/sqrt(2*pi*sigma^2) * exp( -((x-mu)^2) / (2*sigma^2) )
}
print(paste('mu=',mu,' sigma=',sigma,' L=',L))
}
library(xtable)
library(xtable)
Sys.setenv(LANG = "en")
library(abc)
library(abc)
library(datasets)
data(airquality)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data=airquality)
opts_chunk$set(echo=FALSE, results="hide")
library(knitr)
opts_chunk$set(echo=FALSE, results="hide")
?opts_chunk
library(knitr)
opts_chunk$set(echo=FALSE, results="hide")
?opts_chunk
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms
dim(ms)
p <- c(0.6,0.4)
p
x <- 1
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
l[1] <- 0
l <- data.frame()
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
?data.frame
l <- matrix(0, ncol = 1, nrow = 2)
l <- data.frame(l)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.25,0.75)
p
x <- 1
l <- matrix(0, ncol = 1, nrow = 2)
l <- data.frame(l)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.75,0.25)
p
x <- 1
l <- matrix(0, ncol=1, nrow=2)
l <- data.frame(l)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
# 0.3906825
for (i in 1:nrow(ms)) {
print(ms)
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
l <- matrix(0, ncol=1, nrow=2)
l <- data.frame(l)
l
l[1]
l[2]
p[1]
p[2]
p <- c(0.25,0.75)
p[1]
p[2]
l <- c(0,0)
l[1]
l[2]
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[1] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
## ms <- data.frame(mu=c(0,2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
## p <- c(0.25,0.75)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[1] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
# 0.3906825
i=2
mu <- ms[i,1]
sigma <- ms[i,2]
mu
sigma
p[i]
1/(sqrt(2*pi)*sigma)
exp( -((x-mu)^2) / (2*sigma^2) )
p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.25,0.75)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
# 0.3906825
p <- c(0.75,0.25)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,-2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.25,0.75)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,-2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.75,0.25)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
# 0.5
ms <- data.frame(mu=c(0,3), sigma=c(1,2))
ms <- data.frame(mu=c(0,-2), sigma=c(1,3))
ms
dim(ms)
p <- c(0.6,0.4)
p <- c(0.25,0.75)
p
x <- 1
l <- c(0,0)
for (i in 1:nrow(ms)) {
mu <- ms[i,1]
sigma <- ms[i,2]
l[i] <- p[i] * 1/(sqrt(2*pi)*sigma) * exp( -((x-mu)^2) / (2*sigma^2) )
print(paste0('i=',i,' (mu=',mu,' sigma=',sigma,') l=',l[i]))
}
# ????
l[1] /(l[1]+l[2])
# 0.75
# 0.5
install.packages("openintro")
install.packages("BHH2")
setwd("E:/MyDocuments/UNIVERSITIES/COURSERA - Reproducible Research/material/3")
# if (!file.exists("data")) {
#     dir.create("data")
# }
# setInternet2(use=T)
# require(downloader)
# fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
# download(fileUrl,destfile="ss06hid.csv",mode="wb")
# Sys.setenv(LANG = "en")
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/00275/
Bike-Sharing-Dataset.zip", "ProjectData/Bike-Sharing-Dataset.zip")
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/00275/
Bike-Sharing-Dataset.zip", "Bike-Sharing-Dataset.zip")
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip",
"Bike-Sharing-Dataset.zip")
install.packages(c("knitr", "manipulate"))
sessionInfo()
?LC_COLLATE
Sys.setlocale("LC_TIME", "German")
sessionInfo()
Sys.setlocale("LC_TIME", "US")
sessionInfo()
Sys.setlocale("LC_TIME", "German")
install.packages("ggplot2")
?knit2html
if (!file.exists("./activity.csv")) {}
unzip(zipfile="./activity.zip")
}
if (!file.exists("./activity.csv")) {
unzip(zipfile="./activity.zip")
}
betwd()
getwd()
setwd("C:/Users/Axel Schwanke/Documents/GitHub/RepData_PeerAssessment1")
if (!file.exists("./activity.csv")) {
unzip(zipfile="./activity.zip")
}
if (!file.exists("./activity.csv")) {
unzip(zipfile="./activity.zip")
}
data <- read.csv(file="./activity.csv")
str(data)
data$date <- as.Date(data$date)
str(data)
head(date)
head(data)
head(data,20)
dim(data)
tail(data,20)
summary(data)
qplot(steps, data=data, geom='histogram', binwidth = 40)
library(ggplot2)
qplot(steps, data=data, geom='histogram', binwidth = 40)
qplot(steps, data=data, geom='histogram', binwidth = 40, main="abc")
apply(data,2,mean)
daily_total <- tapply(data$steps, data$date, sum)
daily_total
total_steps_per_day <- tapply(data$steps, data$date, sum)
total_steps_per_day <- tapply(data$steps, data$date, sum)
total_steps_per_day
hist(daily_total, xlab="Daily total number of steps")
hist(total_steps_per_day, xlab="Daily total number of steps")
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day")
hist(total_steps_per_day, breaks=30, xlab="Total number of steps per day")
hist(total_steps_per_day, breaks=50, xlab="Total number of steps per day")
mean_steps_per_day <- mean(total_steps_per_day, na.rm=TRUE)
median_steps_per_day <- median(total_steps_per_day, na.rm=TRUE)
The mean is `r mean_steps_per_day` and the median is `r median_steps_per_day`.
hist(total_steps_per_day, breaks=10, xlab="Total number of steps per day")
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day")
mean_steps_per_day
median_steps_per_day
hist(total_steps_per_day, breaks=10, xlab="Total number of steps per day")
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day", ylab="Percentage")
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day", ylab="Percentage",
main="Histogram of the total number of steps taken per day")
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day", ylab="Percentage",
main="Total number of steps taken per day")
mean_steps_per_day
?format
format(mean_steps_per_day, scientific=FALSE)
format(mean_steps_per_day)
head(data)
tail(data)
View(data)
View(data)
View(data)
interval_mean <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
interval_mean
data$interval[1:288]
data$intervals
data$interval
sort(unique(data$interval))
data$interval[1:288]
avg_steps_per_interval
avg_steps_per_interval <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
avg_steps_per_interval
length(avg_steps_per_interval)
plot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps")
intervals <- sort(unique(data$interval))
plot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps")
plot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps",
main="Average daily activity")
intervals
plot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps",
xlim=c(0,2400), main="Average daily activity")
?xlim
qplot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps",
xlim=c(0,2400), main="Average daily activity")
plot(intervals, avg_steps_per_interval, type="l", xlab="Interval", ylab="Mean number of steps",
xlim=c(0,2400), main="Average daily activity")
mostActiveInterval <- intervals[which.max(avg_steps_per_interval)]
mostActiveInterval
summary(data$steps)
summary(total_steps_per_day)
total_steps_per_day
sum(is.na(data$steps))
sumNA <- sum(is.na(data$steps))
# create a new dataset - initalize
dataNew <- data
# loop over all rows
for (i in 1:nrow(data)) {
# if column steps contains NA
if (is.na(data$steps[i])) {
# replace NA with the mean of all non-NA values of the same interval
dataNew$steps[i] <- mean(data$steps[data$interval == data$interval[i]], na.rm=TRUE)
}
}
total_steps_per_day <- tapply(dataNew$steps, dataNew$date, sum)
hist(total_steps_per_day)
total_steps_per_day <- tapply(dataNew$steps, dataNew$date, sum)
hist(total_steps_per_day, breaks=20, xlab="Total number of steps per day", ylab="Percentage",
main="Total number of steps taken per day")
dataNew$steps
data$steps
dataNew$steps
head(data)
head(dataNew)
mean_steps_per_day <- mean(total_steps_per_day, na.rm=TRUE)
median_steps_per_day <- median(total_steps_per_day, na.rm=TRUE)
mean_steps_per_day
median_steps_per_day
total_steps_per_dayNew <- tapply(dataNew$steps, dataNew$date, sum)
hist(total_steps_per_dayNew, breaks=20, xlab="Total number of steps per day", ylab="Percentage",
main="Total number of steps taken per day")
mean_steps_per_dayNew <- mean(total_steps_per_dayNew, na.rm=TRUE)
median_steps_per_dayNew <- median(total_steps_per_dayNew, na.rm=TRUE)
mean_steps_per_dayNew
median_steps_per_dayNew
mean_steps_per_dayNew <- mean(total_steps_per_dayNew)
median_steps_per_dayNew <- median(total_steps_per_dayNew)
mean_steps_per_dayNew
median_steps_per_dayNew
wd <- weekdays(as.Date(data$date))
wd
Sys.setenv(LANG = "en")
wd
wd <- weekdays(as.Date(data$date))
wd
session.info()
info_session()
library(knitr)
session.info()
?Sys
?Sys.setenv
sessioninfo()
sessionInfo()
Sys.setenv(LC_TIME = "")
Sys.setenv(LC_TIME = "US")
wd
Sys.setlocale("LC_TIME", "English")
Sys.setenv(LC_TIME = "US")
wd
sessionInfo()
wd <- weekdays(as.Date(data$date))
wd
we <- (wd == "Saturday" | wd == "Sunday")
?weekdays
we <- (wd == "Saturday" | wd == "Sunday")
we
wd
we
dataNew$weekend <- FALSE
dataNew$weekend <- (wd == "Saturday" | wd == "Sunday")
dataNew$weekend
dataNew$weekend <- as.factor(dataNew$weekend)
dataNew$weekend
weekend_mean <- tapply(data$steps[weekend], data$interval[weekend], mean)
weekend_mean <- tapply(dataNew$steps[dataNew$weekend], dataNew$interval[dataNew$weekend], mean)
weekend_mean
weekday_mean
weekday_mean <- tapply(dataNew$steps[!dataNew$weekend], dataNew$interval[!dataNew$weekend], mean)
dataNew$weekend
dataNew$steps[!dataNew$weekend]
weekday_mean <- tapply(dataNew$steps[dataNew$weekend==FALSE], dataNew$interval[dataNew$weekend], mean)
weekday_mean <- tapply(dataNew$steps[dataNew$weekend==FALSE], dataNew$interval[dataNew$weekend==FALSE], mean)
weekday_mean
weekend_mean
dataNew$weekend
dataNew$weekend==FALSE
dataNew$weekend==FALSE
weekday_mean <- tapply(dataNew$steps[!dataNew$weekend], dataNew$interval[dataNew$weekend==FALSE], mean)
weekend_mean <- tapply(dataNew$steps[dataNew$weekend==TRUE], dataNew$interval[dataNew$weekend==TRUE], mean)
weekday_mean <- tapply(dataNew$steps[dataNew$weekend==FALSE], dataNew$interval[dataNew$weekend==FALSE], mean)
weekend_mean
weekday_mean <- tapply(dataNew$steps[dataNew$weekend==FALSE], dataNew$interval[dataNew$weekend==FALSE], mean)
weekday_mean
plot(intervals, weekend_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekend")
par(mfrow=c(2,1))
plot(intervals, weekend_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekend")
plot(intervals, weekday_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekday")
par(mfrow=c(1,1))
opts_chunk$set(echo=TRUE, fig.path='figure)
')'
par(mfrow=c(2,1))
plot(intervals, weekday_mean, type="l", xlab="Interval",
ylab="Avg. number of steps", main="weekday days")
plot(intervals, weekend_mean, type="l", xlab="Interval",
ylab="Avg. number of steps", main="weekend days")
par(mfrow=c(1,1))
""
)
}{}
''""
par(mfrow=c(2,1))
plot(intervals, weekday_mean, type="l", xlab="Interval",
ylab="Avg. number of steps", main="weekday days")
plot(intervals, weekend_mean, type="l", xlab="Interval",
ylab="Avg. number of steps", main="weekend days")
par(mfrow=c(1,1))
